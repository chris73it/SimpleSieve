#pragma once
#include <cstdint>
#include <iostream>
#include <array>

class Quot final
{
	friend std::ostream& operator << (std::ostream& _os, const Quot& _q);

public:
	static inline const std::array<uint8_t, 31> primes = {
	//     1   2   3   4   5    6    7    8    9   10
	/*1*/  2,  3,  5,  7, 11,  13,  17,  19,  23,  29,
	/*2*/ 31, 37, 41, 43, 47,  53,  59,  61,  67,  71,
	/*3*/ 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127
	};
	static inline const std::array<uint32_t, 128> factors = {
		0,
		0,
		// 7397317939317193731719397310000
		// 2100009887776655444332211117532
		// 111111
		0b00000000000000000000000000000001, // 2 is primes[0]
		0b00000000000000000000000000000010, // 3 is primes[1]
		0b00000000000000000000000000000001, // 4 is (2 ^ 2)
		0b00000000000000000000000000000100, // 5 is primes[2]
		// 7397317939317193731719397310000
		// 2100009887776655444332211117532
		// 111111
		0b00000000000000000000000000000011, // 6 is (2 ^ 1) * (3 ^ 1)
		0b00000000000000000000000000001000, // 7 is primes[3]
		0b00000000000000000000000000000001, // 8 is (2 ^ 3)
		0b00000000000000000000000000000010, // 9 is (3 ^ 2)
		0b00000000000000000000000000000101, //10 is (2 ^ 1) * (5 ^ 1)
		// 7397317939317193731719397310000
		// 2100009887776655444332211117532
		// 111111
		0b00000000000000000000000000010000, //11 is primes[4]
		0b00000000000000000000000000000011, //12 is (2 ^ 2) * (3 ^ 1)
		0b00000000000000000000000000100000, //13 is primes[5]
		0b00000000000000000000000000001001, //14 is (2 ^ 1) * (7 ^ 1)
		0b00000000000000000000000000000110, //15 is (3 ^ 1) * (5 ^ 1)
		// 7397317939317193731719397310000
		// 2100009887776655444332211117532
		// 111111
		0b00000000000000000000000000000001, //16 is (2 ^ 4)
		0b00000000000000000000000001000000, //17 is primes[6]
		0b00000000000000000000000000000011, //18 is (2 ^ 1) * (3 ^ 2)
		0b00000000000000000000000010000000, //19 is primes[7]
		0b00000000000000000000000000000101, //20 is (2 ^ 2) * (5 ^ 1)
		// 7397317939317193731719397310000
		// 2100009887776655444332211117532
		// 111111
		0b00000000000000000000000000001010, //21 is (3 ^ 1) * (7 ^ 1)
		0b00000000000000000000000000010001, //22 is (2 ^ 1) * (11 ^ 1)
		0b00000000000000000000000100000000, //23 is primes[8]
		0b00000000000000000000000000000011, //24 is (2 ^ 3) * (3 ^ 1)
		0b00000000000000000000000000000100, //25 is (5 ^ 2)
		// 7397317939317193731719397310000
		// 2100009887776655444332211117532
		// 111111
		0b00000000000000000000000000100001, //26 is (2 ^ 1) * (13 ^ 1)
		0b00000000000000000000000000000010, //27 is (3 ^ 3)
		0b00000000000000000000000000001001, //28 is (2 ^ 2) * (7 ^ 1)
		0b00000000000000000000001000000000, //29 is primes[9]
		0b00000000000000000000000000000111, //30 is (2 ^ 1) * (3 ^ 1) * (5 ^ 1)
		// 7397317939317193731719397310000
		// 2100009887776655444332211117532
		// 111111
		0b00000000000000000000010000000000, //31 is primes[10]
		0b00000000000000000000000000000001, //32 is (2 ^ 5)
		0b00000000000000000000000000010010, //33 is (3 ^ 1) * (11 ^ 1)
		0b00000000000000000000000001000001, //34 is (2 ^ 1) * (17 ^ 1)
		0b00000000000000000000000000001100, //35 is (5 ^ 1) * (7 ^ 1)
		// 7397317939317193731719397310000
		// 2100009887776655444332211117532
		// 111111
		0b00000000000000000000000000000011, //36 is (2 ^ 2) * (3 ^ 2)
		0b00000000000000000000100000000000, //37 is primes[11]
		0b00000000000000000000000010000001, //38 is (2 ^ 1) * (19 ^ 1)
		0b00000000000000000000000000100010, //39 is (3 ^ 1) * (13 ^ 1)
		0b00000000000000000000000000000101, //40 is (2 ^ 3) * (5 ^ 1)
		// 7397317939317193731719397310000
		// 2100009887776655444332211117532
		// 111111
		0b00000000000000000001000000000000, //41 is primes[12]
		0b00000000000000000000000000001011, //42 is (2 ^ 1) * (3 ^ 1) * (7 ^ 1)
		0b00000000000000000010000000000000, //43 is primes[13]
		0b00000000000000000000000000010001, //44 is (2 ^ 2) * (11 ^ 1)
		0b00000000000000000000000000000110, //45 is (3 ^ 2) * (5 ^ 1)
		// 7397317939317193731719397310000
		// 2100009887776655444332211117532
		// 111111
		0b00000000000000000000000100000001, //46 is (2 ^ 1) * (23 ^ 1)
		0b00000000000000000100000000000000, //47 is primes[14]
		0b00000000000000000000000000000011, //48 is (2 ^ 4) * (3 ^ 1)
		0b00000000000000000000000000001000, //49 is (7 ^ 2)
		0b00000000000000000000000000000101, //50 is (2 ^ 1) * (5 ^ 2)
		// 7397317939317193731719397310000
		// 2100009887776655444332211117532
		// 111111
		0b00000000000000000000000001000010, //51 is (3 ^ 1) * (17 ^ 1)
		0b00000000000000000000000000100001, //52 is (2 ^ 2) * (13 ^ 1)
		0b00000000000000001000000000000000, //53 is primes[15]
		0b00000000000000000000000000000011, //54 is (2 ^ 1) * (3 ^ 3)
		0b00000000000000000000000000010100, //55 is (5 ^ 1) * (11 ^ 1)
		// 7397317939317193731719397310000
		// 2100009887776655444332211117532
		// 111111
		0b00000000000000000000000100000001, //56 is (2 ^ 1) * (23 ^ 1)
		0b00000000000000000000000010000010, //57 is (3 ^ 1) * (19 ^ 1)
		0b00000000000000000000001000000001, //58 is (2 ^ 1) * (29 ^ 1)
		0b00000000000000010000000000000000, //59 is primes[16]
		0b00000000000000000000000000000111, //60 is (2 ^ 2) * (3 ^ 1) * (5 ^ 1)
		// 7397317939317193731719397310000
		// 2100009887776655444332211117532
		// 111111
		0b00000000000000100000000000000000, //61 is primes[17]
		0b00000000000000000000010000000001, //62 is (2 ^ 1) * (31 ^ 1)
		0b00000000000000000000000000001010, //63 is (3 ^ 2) * (7 ^ 1)
		0b00000000000000000000000000000001, //64 is (2 ^ 6)
		0b00000000000000000000000000100100, //65 is (5 ^ 1) * (13 ^ 1)
		// 7397317939317193731719397310000
		// 2100009887776655444332211117532
		// 111111
		0b00000000000000000000000000010011, //66 is (2 ^ 1) * (3 ^ 1) * (11 ^ 1)
		0b00000000000001000000000000000000, //67 is primes[18]
		0b00000000000000000000000001000001, //68 is (2 ^ 2) * (17 ^ 1)
		0b00000000000000000000000100000010, //69 is (3 ^ 1) * (23 ^ 1)
		0b00000000000000000000000000001101, //70 is (2 ^ 1) * (5 ^ 1) * (7 ^ 1)
		// 7397317939317193731719397310000
		// 2100009887776655444332211117532
		// 111111
		0b00000000000010000000000000000000, //71 is primes[19]
		0b00000000000000000000000000000011, //72 is (2 ^ 3) * (3 ^ 2)
		0b00000000000100000000000000000000, //73 is primes[20]
		0b00000000000000000000100000000001, //74 is (2 ^ 1) * (37 ^ 1)
		0b00000000000000000000000000000110, //75 is (3 ^ 1) * (5 ^ 2)
		// 7397317939317193731719397310000
		// 2100009887776655444332211117532
		// 111111
		0b00000000000000000000000010000001, //76 is (2 ^ 2) * (19 ^ 2)
		0b00000000000000000000000000011000, //77 is (7 ^ 1) * (11 ^ 1)
		0b00000000000000000000000000100011, //78 is (2 ^ 1) * (3 ^ 1) * (13 ^ 1)
		0b00000000001000000000000000000000, //79 is primes[21]
		0b00000000000000000000000000000101, //80 is (2 ^ 4) * (5 ^ 1)
		// 7397317939317193731719397310000
		// 2100009887776655444332211117532
		// 111111
		0b00000000000000000000000000000010, //81 is (3 ^ 4)
		0b00000000000000000001000000000001, //82 is (2 ^ 1) * (41 ^ 1)
		0b00000000010000000000000000000000, //83 is primes[22]
		0b00000000000000000000000000001011, //84 is (2 ^ 2) * (3 ^ 1) * (7 ^ 1)
		0b00000000000000000000000001000100, //85 is (5 ^ 1) * (17 ^ 1)
		// 7397317939317193731719397310000
		// 2100009887776655444332211117532
		// 111111
		0b00000000000000000010000000000001, //86 is (2 ^ 1) * (43 ^ 1)
		0b00000000000000000000001000000010, //87 is (3 ^ 1) * (29 ^ 1)
		0b00000000000000000000000000010001, //88 is (2 ^ 3) * (11 ^ 1)
		0b00000000100000000000000000000000, //89 is primes[23]
		0b00000000000000000000000000000111, //90 is (2 ^ 1) * (3 ^ 2) * (5 ^ 1)
		// 7397317939317193731719397310000
		// 2100009887776655444332211117532
		// 111111
		0b00000000000000000000000000101000, //91 is (7 ^ 1) * (13 ^ 1)
		0b00000000000000000000000100000001, //92 is (2 ^ 2) * (23 ^ 1)
		0b00000000000000000000010000000010, //93 is (3 ^ 1) * (31 ^ 1)
		0b00000000000000000100000000000001, //94 is (2 ^ 1) * (47 ^ 1)
		0b00000000000000000000000010000100, //95 is (5 ^ 1) * (19 ^ 1)
		// 7397317939317193731719397310000
		// 2100009887776655444332211117532
		// 111111
		0b00000000000000000000000000000011, //96 is (2 ^ 5) * (3 ^ 1)
		0b00000001000000000000000000000000, //97 is primes[24]
		0b00000000000000000000000000001001, //98 is (2 ^ 1) * (7 ^ 2)
		0b00000000000000000000000000010010, //99 is (3 ^ 2) * (11 ^ 1)
		0b00000000000000000000000000000101,//100 is (2 ^ 2) * (5 ^ 2)
		// 7397317939317193731719397310000
		// 2100009887776655444332211117532
		// 111111
		0b00000010000000000000000000000000,//101 is primes[25]
		0b00000000000000000000000001000011,//102 is (2 ^ 1) * (3 ^ 1) * (17 ^ 1)
		0b00000100000000000000000000000000,//103 is primes[26]
		0b00000000000000000000000000100001,//104 is (2 ^ 3) * (13 ^ 1)
		0b00000000000000000000000000001110,//105 is (3 ^ 1) * (5 ^ 1) * (7 ^ 1)
		// 7397317939317193731719397310000
		// 2100009887776655444332211117532
		// 111111
		0b00000000000000001000000000000001,//106 is (2 ^ 1) * (53 ^ 1)
		0b00001000000000000000000000000000,//107 is primes[27]
		0b00000000000000000000000000000011,//108 is (2 ^ 2) * (3 ^ 3)
		0b00010000000000000000000000000000,//109 is primes[28]
		0b00000000000000000000000000010101,//110 is (2 ^ 1) * (5 ^ 1) * (11 ^ 1)
		// 7397317939317193731719397310000
		// 2100009887776655444332211117532
		// 111111
		0b00000000000000000000100000000010,//111 is (3 ^ 1) * (37 ^ 1)
		0b00000000000000000000000000001001,//112 is (2 ^ 4) * (7 ^ 1)
		0b00100000000000000000000000000000,//113 is primes[29]
		0b00000000000000000000000010000011,//114 is (2 ^ 1) * (3 ^ 1) * (19 ^ 1)
		0b00000000000000000000000100000100,//115 is (5 ^ 1) * (23 ^ 1)
		// 7397317939317193731719397310000
		// 2100009887776655444332211117532
		// 111111
		0b00000000000000000000001000000001,//116 is (2 ^ 2) * (29 ^ 1)
		0b00000000000000000000000000100010,//117 is (3 ^ 2) * (13 ^ 1)
		0b00000000000000010000000000000001,//118 is (2 ^ 1) * (59 ^ 1)
		0b00000000000000000000000001001000,//119 is (7 ^ 1) * (17 ^ 1)
		0b00000000000000000000000000000111,//120 is (2 ^ 3) * (3 ^ 1) * (5 ^ 1)
		// 7397317939317193731719397310000
		// 2100009887776655444332211117532
		// 111111
		0b00000000000000000000000000010000,//121 is (11 ^ 1)
		0b00000000000000100000000000000001,//122 is (2 ^ 1) * (61 ^ 1)
		0b00000000000000000001000000000010,//123 is (3 ^ 1) * (41 ^ 1)
		0b00000000000000000000010000000001,//124 is (2 ^ 2) * (31 ^ 1)
		0b00000000000000000000000000000100,//125 is (5 ^ 3)
		// 7397317939317193731719397310000
		// 2100009887776655444332211117532
		// 111111
		0b00000000000000000000000000001011,//126 is (2 ^ 1) * (3 ^ 2) * (7 ^ 1)
		0b01000000000000000000000000000000,//127 is primes[30]
};

public:
	operator double() const;
	double approx();
	void simplify();
public:
	Quot(uint8_t _num, uint8_t _den = 1);
	Quot();
	~Quot() = default;
	      Quot& operator +=(const Quot& _rhs);
	const Quot  operator + (const Quot& _rhs) const;
private:
	uint32_t m_num;
	uint32_t m_den;
	uint32_t m_num_factors;
	uint32_t m_den_factors;
};

std::ostream& operator << (std::ostream& _os, const Quot& _q);